* gnus configuration

#+begin_src emacs-lisp
;;  (starter-kit-load "gnus" "bbdb")
;;  (starter-kit-load "gnus" "pretty-summary")
;;  (starter-kit-load "gnus" "imap")

#+end_src

* org-mode configuration

#+begin_src emacs-lisp
  (custom-set-variables
   '(org-agenda-span 7)
   '(org-agenda-show-all-dates t)
   '(org-agenda-skip-deadline-if-done t)
   '(org-agenda-skip-scheduled-if-done t)
   '(org-agenda-start-on-weekday nil)
   '(org-capture-templates (quote (("t" "New task" entry (file+olp "~/projects/organizer/todo.org" "Tasks") "* TODO %? \n %U"))))
   '(org-fast-tag-selection-single-key (quote expert)))
  
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitch)
  
  (global-font-lock-mode 1)
  (setq org-export-email-info nil)
  (setq org-enforce-todo-dependencies nil)
  
  (setq org-default-notes-file "~/projects/organizer/notes.org")
  
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (python . t)
     (sh . t)
     (ditaa . t)
     ))
  (setq org-babel-python-mode 'python-mode)
  
  ;;(setq org-modules
  ;; '(org-bbdb
  ;;   org-gnus
  ;;   org-jsinfo))
  
  (add-to-list 'org-modules 'org-habit)
  (require 'org-habit)
  
  (setq org-entities-user '(("hds" "\~" nil " " " " " " " ")))
  
  (add-to-list 'load-path "~/.emacs.d/site-lisp")

  (setq org-mobile-directory "/mnt/phone/MobileOrg")
#+end_src
  
** Exporting bibtex citations to HTML

#+begin_src emacs-lisp
  ;(add-to-list 'org-modules 'org-exp-bibtex)
  ;(require 'org-exp-bibtex)
#+end_src

* python IDE configuration
#+begin_src emacs-lisp
  (starter-kit-load "python" "python")
  
  (defun py-execute-statement-and-step ()
    "select a statement, submit as a region and then step forward"
    (interactive)
    (beginning-of-line 1)
    (let ((beg (point)))
      (py-next-statement 1) 
      ; if last statement.
          (if (= (point) beg) (end-of-buffer ))
          (py-execute-region beg (point))
          (next-line)
    )
  ) 
  
  (custom-set-variables
  '(py-shell-switch-buffers-on-execute nil))
  
  (define-key python-mode-map (quote [f9])
  'py-execute-statement-and-step)
#+end_src

#+RESULTS:
: py-execute-statement-and-step

* ess

#+BEGIN_SRC emacs-lisp
  (setq load-path (cons "/usr/share/emacs/site-lisp/ess" load-path))
  (require 'ess-site)  
#+END_SRC
